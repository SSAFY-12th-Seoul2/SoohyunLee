def get_sum(x, y, tetromino):
    total = 0
    for dx, dy in tetromino:
        nx, ny = x + dx, y + dy
        if 0 <= nx < N and 0 <= ny < M:
            total += grid[nx][ny]
        else:
            return 0
    return total

# # 테트로미노 모양
# ## 일일이 다 설정하는 것에는 무리가 있음

# tetrominos = [
#     [(0,0), (0,1), (0,2), (0,3)],  # ㅡ
#     [(0,0), (1,0), (2,0), (3,0)],  # ㅣ
#     [(0,0), (0,1), (1,0), (1,1)],  # ㅁ
#     [(0,0), (1,0), (2,0), (2,1)],  # ㄴ
#     [(0,0), (0,1), (0,2), (1,0)],
#     [(0,0), (0,1), (1,1), (2,1)],
#     [(0,1), (1,1), (2,1), (2,0)],
#     [(0,0), (0,1), (0,2), (1,2)],  # ㄱ
#     [(0,0), (1,0), (1,1), (1,2)],
#     [(0,0), (1,0), (2,0), (0,1)],
#     [(1,0), (1,1), (1,2), (0,2)],
#     [(0,0), (0,1), (1,1), (1,2)],  # ㄹ
#     [(1,0), (1,1), (0,1), (0,2)],
#     [(0,0), (1,0), (1,1), (2,1)],
#     [(0,1), (1,0), (1,1), (2,0)],
#     [(0,0), (0,1), (0,2), (1,1)],  # ㅜ
#     [(0,1), (1,0), (1,1), (1,2)],
#     [(0,0), (1,0), (1,1), (2,0)],
#     [(1,0), (0,1), (1,1), (2,1)]
# ]

# 회전 변환 함수 (90도 회전)
def rotate(tetromino):
    return [(y, -x) for x, y in tetromino]

# 대칭 변환 함수 (좌우 대칭)
def flip(tetromino):
    return [(x, -y) for x, y in tetromino]

# 테트로미노의 모든 변형된 경우 생성
def get_all_variants(tetromino):
    variants = []
    current = tetromino
    # 4번 회전하여 모든 회전된 경우 추가
    for _ in range(4):
        variants.append(current)
        current = rotate(current)
    # 좌우 대칭 후 4번 회전한 경우 추가
    current = flip(tetromino)
    for _ in range(4):
        variants.append(current)
        current = rotate(current)
    return variants

# 기본 테트로미노 모양만 정의
basic_tetrominos = [
    [(0,0), (0,1), (0,2), (0,3)],  # ㅡ
    [(0,0), (1,0), (1,1), (2,1)],  # ㄹ
    [(0,0), (1,0), (2,0), (2,1)],  # ㄴ
    [(0,0), (0,1), (1,0), (1,1)],  # ㅁ
    [(0,0), (0,1), (0,2), (1,1)]   # ㅜ
]

# 변형된 모든 테트로미노 모양을 저장
tetrominos = []
for basic_tetromino in basic_tetrominos:
    tetrominos.extend(get_all_variants(basic_tetromino))

N, M = map(int, input().split())
grid = [list(map(int, input().split())) for _ in range(N)]

max_sum = 0
for i in range(N):
    for j in range(M):
        for tetromino in tetrominos:
            max_sum = max(max_sum, get_sum(i, j, tetromino))

print(max_sum)
